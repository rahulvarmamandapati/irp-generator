{"version":3,"sources":["services/hooks/useFormState.js","components/pages/Page1.js","components/SelectProfileAvatar.js"],"names":["useFormState","initState","validForm","setValidForm","React","emailReg","hasError","value","key","match","setForm","[object Object]","StyledH2","styled","h2","withConfig","displayName","componentId","props","theme","sansSerif","darkBlue","device","breakUp768","StyledH5","h5","StyledHr","hr","breakUp1024","Page1","state","currentPage","profile","avatars","dispatch","StepperContext","name","avatar_id","isValid","id","LottieBg","lottieData","bgLottieDots","fallback","bgBlueCylinderPattern","ThemeProvider","theme1","Container","Header","StyledWrapper","ReStyledRow","ReStyledColThreeThirdsMdUp","className","StyledFieldSet","StyledLabel","clsx","htmlFor","StyledInput","type","placeholder","onChange","e","target","style","marginBottom","StyledAvatars","map","avatar","StyledInvisButton","onClick","SelectProfileAvatar","concat","selected","size","ReStyledColOneThirdsMdUp","ProfileAvatar","StyledP","PageControls","validate","StyledProfileImage","svg","spacing35","breakUp1440","_ref","hover","setHover","useState","createElement","overflow","onMouseEnter","onMouseLeave","xlinkHref"],"mappings":"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","file":"static/js/14.b11091d1.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport const useFormState = (initState) => {\n  const [validForm, setValidForm] = React.useState(initState);\n  const emailReg =\n    // eslint-disable-next-line\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const hasError = (value, key) => {\n    switch (key) {\n      case 'email':\n        return !value.match(emailReg);\n      default:\n        return value === '';\n    }\n  };\n  const setForm = (key, value) =>\n    setValidForm({\n      ...validForm,\n      [key]: {\n        ...validForm[key],\n        value,\n        hasError: hasError(value, key),\n      },\n    });\n  return [validForm, setForm];\n};\n","import * as React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components/macro';\nimport clsx from 'clsx';\nimport { StepperContext } from '../../contexts/stepperContext';\nimport { device } from '../../device';\nimport { useFormState } from '../../services/hooks/useFormState';\nimport Container from '../Container';\nimport Header from '../Header';\nimport PageControls from '../PageControls';\nimport ProfileAvatar from '../ProfileAvatar';\nimport SelectProfileAvatar from '../SelectProfileAvatar';\nimport LottieBg from '../LottieBg';\nimport bgLottieDots from '../../data/bg-cylinders.json';\nimport bgBlueCylinderPattern from '../../images/bg-blue-cylinder-pattern.jpg';\nimport {\n  theme1,\n  StyledFieldSet,\n  StyledLabel,\n  StyledInput,\n  StyledP,\n} from '../../theme/globalStyle';\nimport {\n  StyledInvisButton,\n  StyledWrapper,\n  ReStyledRow,\n  ReStyledColOneThirdsMdUp,\n  ReStyledColThreeThirdsMdUp,\n  StyledAvatars,\n} from './Page.styles';\n\nconst StyledH2 = styled.h2`\n  margin-top: 0;\n  margin-bottom: 35px;\n  font-family: ${(props) => props.theme.sansSerif};\n  font-weight: bold;\n  font-style: normal;\n  font-size: 20px;\n  line-height: 24px;\n  color: ${(props) => props.theme.darkBlue};\n  @media ${device.breakUp768} {\n    font-size: 24px;\n    line-height: 28px;\n  }\n  span {\n    font-weight: normal;\n  }\n`;\n\nconst StyledH5 = styled.h5`\n  margin-top: 0;\n  margin-bottom: 35px;\n  font-family: ${(props) => props.theme.sansSerif};\n  font-weight: bold;\n  font-style: normal;\n  font-size: 20px;\n  line-height: 24px;\n  color: ${(props) => props.theme.darkBlue};\n`;\n\nconst StyledHr = styled.hr`\n  border-top: 1px solid #ebeaed;\n  margin: 30px auto;\n  @media ${device.breakUp768} {\n    margin: 50px auto;\n  }\n  @media ${device.breakUp1024} {\n    display: none;\n  }\n`;\n\nfunction Page1() {\n  const {\n    state: { currentPage, profile, avatars },\n    dispatch,\n  } = React.useContext(StepperContext);\n  const [validForm, setForm] = useFormState({\n    name: { value: '', hasError: '' },\n    avatar_id: { value: '', hasError: '' },\n  });\n  const isValid = profile.name !== '' && !!profile.avatar_id.id;\n  const validate = () => {\n    setForm('name', validForm.name.value);\n  };\n  return (\n    <>\n      <LottieBg lottieData={bgLottieDots} fallback={bgBlueCylinderPattern} />\n      <ThemeProvider theme={theme1}>\n        <Container>\n          <Header />\n          <StyledWrapper>\n            <ReStyledRow>\n              <ReStyledColThreeThirdsMdUp className=\"order-lgUp-2\">\n                <StyledH2>\n                  Step 1:\n                  {' '}\n                  <span>Select your IRP avatar.</span>\n                </StyledH2>\n                <StyledFieldSet>\n                  <StyledLabel\n                    className={clsx(validForm.name.hasError && 'hasError')}\n                    htmlFor=\"repName\"\n                  >\n                    Letâ€™s give them a name\n                    <StyledInput\n                      type=\"text\"\n                      className={clsx(validForm.name.hasError && 'hasError')}\n                      placeholder=\"Name Your Rep\"\n                      id=\"repName\"\n                      name=\"repName\"\n                      value={profile.name || ''}\n                      onChange={(e) => {\n                        setForm('name', e.target.value);\n                        dispatch({\n                          type: 'setUserProfile',\n                          profile: { name: e.target.value },\n                        });\n                      }}\n                    />\n                    {validForm.name.hasError && (\n                      <small>Oops, you forgot to give yourself a name!</small>\n                    )}\n                  </StyledLabel>\n                </StyledFieldSet>\n                <StyledFieldSet style={{ marginBottom: 0 }}>\n                  <StyledLabel style={{ marginBottom: '15px' }}>\n                    Select an Avatar\n                  </StyledLabel>\n                  <StyledAvatars>\n                    {avatars.map((avatar) => (\n                      <StyledInvisButton\n                        type=\"button\"\n                        key={avatar.id}\n                        onClick={() => {\n                          dispatch({\n                            type: 'setUserProfile',\n                            profile: { avatar_id: { id: avatar.id } },\n                          });\n                        }}\n                      >\n                        <SelectProfileAvatar\n                          id={`avatar${avatar.id}`}\n                          selected={avatar.id === profile.avatar_id.id}\n                          size=\"x120x115x135x70\"\n                        >\n                          {avatar.id}\n                        </SelectProfileAvatar>\n                      </StyledInvisButton>\n                    ))}\n                  </StyledAvatars>\n                </StyledFieldSet>\n              </ReStyledColThreeThirdsMdUp>\n              <ReStyledColOneThirdsMdUp className=\"order-lgUp-1\">\n                <StyledHr />\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <ProfileAvatar\n                      id={`avatar${profile.avatar_id.id}`}\n                      size=\"x150\"\n                    >\n                      Select an avatar\n                    </ProfileAvatar>\n                  </div>\n                  <div className=\"col\">\n                    <StyledH5 style={{ marginBottom: '20px' }}>\n                      Why is this step important?\n                    </StyledH5>\n                    <StyledP>\n                      Choosing a rep name helps you visualize your ideal rep\n                      profile. Consider giving your rep profile a fun name like\n                      Rockstar Rachel or Moneyball Mike!\n                    </StyledP>\n                  </div>\n                </div>\n              </ReStyledColOneThirdsMdUp>\n            </ReStyledRow>\n          </StyledWrapper>\n          <PageControls\n            currentPage={currentPage}\n            isValid={isValid}\n            validate={validate}\n          />\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default Page1;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport clsx from 'clsx';\nimport { device } from '../device';\n\nconst StyledProfileImage = styled.svg`\n  width: 200px;\n  height: 200px;\n  margin-bottom: ${(props) => props.theme.spacing35};\n  border-radius: 100%;\n  position: relative;\n\n  &.x120 {\n    width: 120px;\n    height: 120px;\n  }\n  &.x150 {\n    width: 150px;\n    height: 150px;\n  }\n  &.x120x115x135x70 {\n    width: 73px;\n    height: 73px;\n    margin-bottom: 0;\n\n    @media ${device.breakUp768} {\n      width: 135px;\n      height: 135px;\n    }\n    @media ${device.breakUp1024} {\n      width: 115px;\n      height: 115px;\n    }\n    @media ${device.breakUp1440} {\n      width: 120px;\n      height: 120px;\n    }\n  }\n\n  &.x70 {\n    width: 70px;\n    height: 70px;\n    margin-bottom: 0;\n  }\n\n  &.x70x50 {\n    width: 50px;\n    height: 50px;\n    margin-bottom: 0;\n\n    @media ${device.breakUp1024} {\n      width: 70px;\n      height: 70px;\n    }\n  }\n\n  .label {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%);\n    text-indent: -999em;\n    user-select: none;\n    z-index: -1;\n  }\n`;\n\nfunction ProfileAvatar({ size, id, selected }) {\n  const [hover, setHover] = React.useState(false);\n  return (\n    <StyledProfileImage\n      overflow=\"auto\"\n      className={clsx('styledProfileImage', size, id, selected && 'selected')}\n      onMouseEnter={() => {\n        setHover(true);\n      }}\n      onMouseLeave={() => {\n        setHover(false);\n      }}\n    >\n      {selected && <use xlinkHref={`#${id}_hover`} />}\n      {!selected && <use xlinkHref={hover ? `#${id}_hover` : `#${id}`} />}\n    </StyledProfileImage>\n  );\n}\n\nexport default ProfileAvatar;\n"],"sourceRoot":""}